#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"POT-Creation-Date: 2022-06-17 10:06+0000\n"
"Plural-Forms: \n"

#: fr/tcp.md:0
msgid ""
"lang: fr\n"
"Title: Comprendre le protocole TCP\n"
"Keywords: tcp, udp, r√©seau, networking, tcp/ip, ip\n"
"Date: 2021-05-04\n"
"Author: Eban\n"
"Summary: Aujourd'hui on s'attaque √† un gros morceau, le protocole `TCP`, "
"vous √™tes pr√™t¬∑e¬∑s ? C'est partit ! ;)\n"
"Slug: tcp\n"
"Category: R√©seau"
msgstr ""

#: fr/tcp.md:2
msgid ""
"Aujourd'hui on s'attaque √† un gros morceau, le protocole `TCP`, vous √™tes "
"pr√™t¬∑e¬∑s ? C'est partit ! ;) TCP (= Transmission Control Protocol) est le "
"protocole de [couche 4](https://fr.wikipedia.org/wiki/Couche_transport) le "
"plus utilis√© et il fait partie int√©grante de nos vies sans que nous ne nous "
"en rendions compte. TCP a √©t√© cr√©√© afin de r√©pondre √† une probl√©matique "
"simple, permettre la communication de fa√ßon fiable entre deux machines. TCP "
"est bas√©, comme de nombreux protocoles, sur une architecture "
"`client-serveur`. Les donn√©es sont d√©coup√©es en blocs appel√©s segments."
msgstr ""

#: fr/tcp.md:4
msgid ""
"La communication s'effectue en trois parties : l'√©tablissement de la "
"connexion, le transfert des donn√©es, la fin de la connexion. Commen√ßons "
"donc par l'√©tablissement de la connexion, il est fait gr√¢ce √† un [handshake "
"en trois √©tapes](https://fr.wikipedia.org/wiki/Three-way_handshake) "
"(Three-way handshake), la premi√®re √©tape est nomm√©e `SYN` (synchronized), "
"le client va donc envoyer un paquet `SYN` au serveur avec lequel il "
"souhaite entamer la communication, il g√©n√®re aussi al√©atoirement un num√©ro "
"de s√©quence qui est transmit dans ce paquet. Le serveur r√©pond ensuite avec "
"un paquet `SYN-ACK` (synchronize, acknowledge), litt√©ralement *accus√© de "
"r√©ception de la demande de synchronisation*, le num√©ro de s√©quence du "
"serveur est g√©n√©r√© al√©atoirement, le num√©ro d'acquittement correspond au "
"num√©ro de s√©quence du client incr√©ment√© d'un. Pour finir, le client envoie "
"un dernier paquet `ACK` au serveur pour confirmer qu'il a bien re√ßu le "
"paquet `SYN-ACK`, le num√©ro de s√©quence de ce paquet est √©gal √† celui "
"g√©n√©r√© par le client plus t√¥t + un, le num√©ro d'acquittement quant a lui "
"est √©gal au num√©ro de s√©quence du serveur augment√© de 1."
msgstr ""

#: fr/tcp.md:6
msgid ""
"Ne vous en faites pas, nous allons voir plus pr√©cis√©ment √† quoi "
"correspondent les num√©ros d'acquittement et de s√©quence ;)."
msgstr ""

#: fr/tcp.md:8
msgid ""
"![Comprendre%20le%20protocole%20TCP%20c2ad32e581ef4daebd3dee3d401ad213/"
"Frame_25.webp](/static/img/tcp/Frame_25.webp)"
msgstr ""

#: fr/tcp.md:10
msgid ""
"Une fois cette initialisation faite, la communication peut commencer, "
"regardons donc de plus pr√®s le contenu d'un paquet TCP, accrochez vous il y "
"a pas mal de contenu üòÑ. Cette partie s'appuie en grand partie sur "
"[l'article wikipedia de "
"TCP](https://fr.wikipedia.org/wiki/Transmission_Control_Protocol#D%C3%A9"
"veloppement_de_TCP). Nous ne d√©taillerons pas l'utilit√© de chacune de ces "
"informations, seulement des plus importantes √† nos yeux."
msgstr ""

#: fr/tcp.md:12
msgid ""
"![Comprendre%20le%20protocole%20TCP%20c2ad32e581ef4daebd3dee3d401ad213/"
"Frame_26.webp](/static/img/tcp/Frame_26.webp)"
msgstr ""

#: fr/tcp.md:14
msgid ""
"Les num√©ros d'acquittement et de s√©quence sont deux valeurs al√©atoires que "
"l'on incr√©mente avec le nombre de donn√©es re√ßues afin de v√©rifier que tout "
"les paquets sont bien arriv√©es dans l'ordre. Les num√©ros d'acquittement et "
"de s√©quence initiaux sont g√©n√©r√©s al√©atoirement durant la s√©quence "
"d'initialisation de la connexion que nous avons vu plus t√¥t, le three way "
"handshaking."
msgstr ""

#: fr/tcp.md:16
msgid ""
"Le partie \"Somme de contr√¥le\" est en fait un condensat des donn√©es "
"transmises qui est calcul√© par le serveur et v√©rifi√© par le client afin de "
"garantir l'int√©grit√© des paquets. Si les hash correspondent on consid√®re "
"alors que le paquet a √©t√© transmit sans erreur."
msgstr ""

#: fr/tcp.md:18
msgid ""
"![Comprendre%20le%20protocole%20TCP%20c2ad32e581ef4daebd3dee3d401ad213/"
"Frame_27.webp](/static/img/tcp/Frame_27.webp)"
msgstr ""

#: fr/tcp.md:20
msgid "Le flag `PSH` (push) indique l'envoie de donn√©es."
msgstr ""

#: fr/tcp.md:22
msgid "Le flag `URG` indique la pr√©sence de donn√©es urgentes."
msgstr ""

#: fr/tcp.md:24
msgid ""
"Le flag `ECN/NS` sert quant √† lui √† signaler la pr√©sence de congestion sur "
"le r√©seau."
msgstr ""

#: fr/tcp.md:26
msgid ""
"Dans la partie `Options` on pourrait par exemple citer la MSS (Maximum "
"Segment Size) qui correspond √† la taille maximale de la partie data."
msgstr ""

#: fr/tcp.md:28
msgid ""
"Nous avons vu les parties les plus importantes d'un trame TCP, √©tudions "
"maintenant comment fermer une session avec le protocole TCP."
msgstr ""

#: fr/tcp.md:30
msgid ""
"Pour fermer une session TCP, c'est relativement simple, le premier appareil "
"envoie un paquet `FIN` au second avec son num√©ro de s√©quence, afin de "
"v√©rifier que tous les paquets ont √©t√© re√ßu avant de fermer la "
"communication. Le serveur r√©pond alors avec un `ACK` pour confirmer la "
"r√©ception du message. Le m√™me √©change a ensuite lieu dans l'autre sens, le "
"serveur envoie un paquet `FIN` et le client r√©pond avec un `ACK`."
msgstr ""

#: fr/tcp.md:32
msgid ""
"![Comprendre%20le%20protocole%20TCP%20c2ad32e581ef4daebd3dee3d401ad213/"
"Frame_28.webp](/static/img/tcp/Frame_28.webp)"
msgstr ""

#: fr/tcp.md:34
msgid ""
"Pfiou, √ßa fait beaucoup d'un coup üòÖ. Mettons maintenant tout √ßa en "
"pratique, si vous √™tes arriv√© jusqu'ici, vous avez fait le plus dur, bravo "
"üéâ."
msgstr ""

#: fr/tcp.md:36
msgid ""
"![Comprendre%20le%20protocole%20TCP%20c2ad32e581ef4daebd3dee3d401ad213/"
"Frame_29(5).webp](/static/img/tcp/Frame_29(5).webp)"
msgstr ""

#: fr/tcp.md:38
msgid ""
"Vous remarquerez surement la pr√©sence des mentions de `Win`; `TSval` et "
"`TSecr`, regardons √† quoi elles correspondent"
msgstr ""

#: fr/tcp.md:40
msgid ""
"`Win` correspond √† la fen√™tre, pour faire simple, la taille maximale d'un "
"paquet."
msgstr ""

#: fr/tcp.md:42
msgid ""
"`TSval` et `TSecr` sont simplement des "
"[timestamps](https://fr.wikipedia.org/wiki/Horodatage), `TSval` correspond "
"au moment de l'envoi du paquet et `TSecr` au moment de la r√©ception, chacun "
"des deux participants de la conversation peut soustraire ces deux valeurs "
"pour d√©terminer le `Round Trip Time (RTT)`, le temps que prend un paquet √† "
"√™tre √©chang√©."
msgstr ""

#: fr/tcp.md:44
msgid ""
"Si vous souhaitez √† votre tour inspecter ce simple √©change tcp, le fichier "
"est disponible [ici](/static/misc/tcp/record.pcapng), je vous recommande "
"l'outil [Wireshark](https://www.wireshark.org/) si vous voulez inspecter "
"des paquets de ce type."
msgstr ""

#: fr/tcp.md:46
msgid ""
"Vous l'aurez surement remarqu√©, le protocole TCP a √©t√© con√ßu dans l'optique "
"de minimiser au maximum la perte de donn√©e, gr√¢ce √† des fonctionnalit√© "
"comme les accus√©s de r√©ception (`ACK`) ou la somme de contr√¥le. Mais ces "
"fonctionnalit√©s posent un probl√®me, les paquets s'en retrouvent alourdis, "
"la partie somme de contr√¥le (checksum) p√®se √† elle seule 16 bits par "
"exemple, autre exemple, pour chaque paquet d'envoie de donn√©es (`PSH`), un "
"paquet `ACK` suppl√©mentaire est n√©cessaire, √† chaque fois ! Cette lourdeur "
"pose notamment probl√®me dans le cadre d'applications en temps r√©el, "
"d'autres protocoles comme UDP que nous √©tudierons bient√¥t ont √©t√© cr√©√©s "
"pour rem√©dier √† ce probl√®me."
msgstr ""

#: fr/tcp.md:48
msgid ""
"Merci beaucoup d'√™tre arriv√© jusqu'ici, cet article √©tait plut√¥t complexe "
"j'en suis conscient, si vous avez des question n'h√©sitez surtout pas √† les "
"poser, si vous souhaitez commenter n'oubliez pas que vous pouvez vous "
"connecter (avec le bouton *Log In*) via Github, Twitter et Gitlab."
msgstr ""

#: fr/tcp.md:50
msgid "√Ä demain üëã"
msgstr ""