#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"POT-Creation-Date: 2022-06-16 15:06+0000\n"
"Plural-Forms: \n"

#: fr/mac.md:0
msgid ""
"lang: fr\n"
"Author: Ramle\n"
"Date: 2021/07/20\n"
"Keywords: sécurité\n"
"Slug: mac\n"
"Summary: Un reproche souvent fait à Linux est sa gestion des droits souvent "
"trop permissive, pour remédier à cela on été créés les MAC\n"
"Title: Sécuriser votre système d'exploitation grâce aux MAC\n"
"Category: Cybersécurité/Blue Team"
msgstr ""

#: fr/mac.md:2
msgid ""
"Un reproche souvent fait à Linux est sa gestion des droits souvent trop "
"permissive. Il y a bien sûr une raison historique, à la naissance des "
"différents systèmes d'exploitation que l'on connait aujourd'hui la sécurité "
"n'était pas la préoccupation principale. Le but de base n'était pas non "
"plus de compliquer la tâche des utilisateurs (la sécurité se fait toujours "
"au prix de complexité supplémentaire). Le problème de cette philosophie de "
"départ est qu'il faut repenser la sécurité avec une base trop ouverte."
msgstr ""

#: fr/mac.md:4
msgid ""
"Sous Linux tout est fichier, les périphériques physiques ont par exemple, "
"un fichier attribué dans `/dev`. La sécurité d'accès pour les fichiers se "
"base sur les permission de chaque fichier. Ce mécanisme montre vite des "
"limites. Les autorisations sont très limitées, sous Linux ces autorisations "
"sont divisées en 3, ce que l'utilisateur propriétaire peut faire, ce que le "
"groupe propriétaire peut faire et ce que tout le monde est autorisé à "
"faire. Chaque partie peut avoir 3 droits différents :"
msgstr ""

#: fr/mac.md:8
msgid "R (read) : Lecture"
msgstr ""

#: fr/mac.md:11
msgid "W (write) : Écriture"
msgstr ""

#: fr/mac.md:14
msgid ""
"X (Execute) : Exécution (dans le cadre d'un dossier c'est l'autorisation "
"pour lister le contenu)"
msgstr ""

#: fr/mac.md:18
msgid "On peut visualiser les permissions via la commande `ls -l <dossier>` :"
msgstr ""

#: fr/mac.md:20
msgid ""
"% ls -l\n"
"total 0\n"
"-rwxr-xr-x 1 ramle ramle 0 Jul 19 17:05 executable\n"
"-rw------- 1 root  root  0 Jul 19 17:05 root_only"
msgstr ""

#: fr/mac.md:21
msgid ""
"`ls` divise en 3 parties les permissions, celle de l'utilisateur, du groupe "
"et de tout le monde :"
msgstr ""

#: fr/mac.md:23
msgid "![Détails des droits affichés par LS](/static/img/mac/ls(2).webp)"
msgstr ""

#: fr/mac.md:25
msgid ""
"Le soucis de se baser uniquement sur les permissions des fichiers est le "
"manque de contrôle, le schéma de sécurité des MAC permet de renforcer le "
"tout en regardant beaucoup plus de facteur. Le concept est de regarder "
"toutes le actions faites sur la machine, et de regarder l'action et "
"l'autoriser ou non en fonction des règles d'accès. L'avantage de ce modèle "
"par rapport à la sécurité historique de Linux (et UNIX par la même "
"occasion) est d'être bien plus précis, par exemple autoriser à une "
"application seulement certains ports et fichiers (fichier qui pourrait "
"selon le système de fichier lui être autorisé)."
msgstr ""

#: fr/mac.md:27
msgid ""
"Sous Linux, il n'y a pas de base de framework de MAC, mais des modules dans "
"le noyaux sont prévu pour qu'on y greffe un framework il y en a deux "
"importants, Apparmor et SELinux."
msgstr ""

#: fr/mac.md:29
msgid ""
"Les deux ont des fonctionnalités similaires, mais se différencient par un "
"point important, Apparmor se base sur le chemin complet d'un fichier, là ou "
"SELinux se base seulement sur le nom, cette différence est assez minime "
"dans la plupart des cas, mais en fonction du framework utilisé, des "
"méthodes de contournement se basant sur ces spécificités, par exemple en "
"utilisant des liens virtuels (symlink) ou renommant un fichier, une bonne "
"politique d'accès évite cependant les contournements."
msgstr ""

#: fr/mac.md:31
msgid ""
"Bien sûr, Linux n'est pas le seul système d'exploitation qui utilise des "
"contrôles d'accès plus poussé qu'uniquement des permissions basiques, "
"Windows fonctionne sur [ce "
"principe](https://ilearned.eu.org/secu_windows.html) aussi tout comme MacOS "
"et BSD avec l'intégration de TrustedBSD."
msgstr ""