#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"POT-Creation-Date: 2022-06-16 15:06+0000\n"
"Plural-Forms: \n"

#: fr/tls.md:0
msgid ""
"lang: fr\n"
"Author: Eban\n"
"Date: 2021/05/30\n"
"Keywords: r√©seau, s√©curit√©, tls\n"
"Slug: tls\n"
"Summary: TLS est un protocole que nous utilisons quotidiennement, il est "
"notamment utilis√© dans HTTPS pour s√©curiser la connexion, explorons "
"ensemble le fonctionnement de ce protocole.\n"
"Title: Comment fonctionne le protocole TLS\n"
"Category: R√©seau/HTTP & TLS"
msgstr ""

#: fr/tls.md:2
msgid ""
"TLS est un protocole que nous utilisons quotidiennement, il est notamment "
"utilis√© dans `HTTPS` pour s√©curiser la connexion. TLS est le successeur de "
"SSL, nous verrons prochainement pourquoi SSL a √©t√© abandonn√© au profit de "
"TLS. Dans cet article, nous √©tudierons TLS1.3 qui est la derni√®re version "
"du protocole sortie en 2018. TLS se base √† la fois sur le chiffrement "
"asym√©trique et le chiffrement sym√©trique. Un √©change de cl√© (appel√© "
"handshake ou poign√©e de main) a lieu au d√©but de la connexion, une cl√© "
"secr√®te est √©chang√©e de fa√ßon asym√©trique, cette cl√© est ensuite utilis√©e "
"pour chiffrer les donn√©es (du chiffrement sym√©trique donc). Voyons donc "
"plus en d√©tail comment se passe un handshake avec TLS1.3."
msgstr ""

#: fr/tls.md:4
msgid "![Sch√©mas d'un handshake TLS1.3](/static/img/tls/handshake.webp)"
msgstr ""

#: fr/tls.md:6
msgid ""
"Le client envoie donc dans un premier temps un `**Client Hello**` qui "
"contient entre autre :"
msgstr ""

#: fr/tls.md:10
msgid ""
"Les diff√©rents protocoles cryptographiques (pour le chiffrement asym√©trique "
"et sym√©trique) qu'il supporte."
msgstr ""

#: fr/tls.md:13
msgid ""
"`Key Share` qui correspond a la cl√© publique du client, vous vous "
"demanderez surement comment le client peut bien envoyer sa cl√© publique "
"s'il ne sait pas les protocoles que le serveur supporte, c'est une "
"diff√©rence majeur par rapport √† TLS 1.2, avec TLS 1.3 le client part du "
"principe que le serveur supporte un certain nombre de protocoles et envoie "
"sa cl√© publique pour un de ces protocoles, s'il s'av√®re que ce n'est pas le "
"cas, le serveur va renvoyer un `HelloRetryRequest` ainsi que les protocoles "
"qu'il supporte."
msgstr ""

#: fr/tls.md:17
msgid ""
"Le serveur r√©pond ensuite avec un `**Server Hello**` qui contient entre "
"autre :"
msgstr ""

#: fr/tls.md:21
msgid "Le Certificat TLS qui permet d'assurer l'authenticit√© du serveur."
msgstr ""

#: fr/tls.md:24
msgid ""
"Le `Certificate Verify` qui correspond √† la signature du handshake, il est "
"utilis√© pour s'assurer que  le handshake n'a pas √©t√© modifi√© en cours de "
"route (dans le cas d'un attaque [Man In The "
"Middle](https://en.wikipedia.org/wiki/Man-in-the-middle_attack) par "
"exemple)."
msgstr ""

#: fr/tls.md:27
msgid ""
"`Change Cipher Spec` indique √† l'autre participant le passage √† un mode de "
"chiffrement sym√©trique."
msgstr ""

#: fr/tls.md:30
msgid "Dans `Key Share` le serveur indique sa cl√© publique"
msgstr ""

#: fr/tls.md:33
msgid "`Finished` indique enfin la fin du handshake pour le client."
msgstr ""

#: fr/tls.md:37
msgid ""
"Le client envoie enfin pour terminer un `Change Cipher Spec` et `Finished`. "
"Vous trouverez [ici üìé](/static/misc/tls_1_3.pcawebp) un pcap d'un requ√™te "
"avec TLS 1.3."
msgstr ""

#: fr/tls.md:39
msgid ""
"En parcourant vous verrez que la version de TLS affich√©e est TLS 1.2, *it's "
"not a bug, it's a feature* c'est en fait pour √©viter que certaines "
"middlebox <s>de merde üò°</s>, utilis√©es notamment en entreprise pour "
"espionner le trafic, bloquent le trafic pour des version de TLS au dessus "
"de TLS 1.2."
msgstr ""

#: fr/tls.md:41
msgid ""
"Des paires de cl√©s publique/priv√©e sont d√©riv√©es un cl√© secr√®te afin de "
"chiffrer de fa√ßon sym√©trique les √©changes. Nous d√©taillerons bient√¥t plus "
"en d√©tail ce fonctionnement au travers d'ECDH."
msgstr ""

#: fr/tls.md:43
msgid ""
"Vous l'aurez s√ªrement remarqu√©, le nom de domaine est en clair dans les "
"requ√™tes, √† la base une fonctionnalit√© appel√©e ESNI (Encrypted Server Name "
"Indication) qui permet de chiffrer le nom de domaine dans les requ√™tes "
"aurait d√ª √™tre impl√©ment√©e dans TLS 1.3 mais ce n'est pas encore le cas, "
"ESNI n'est qu'√† l'√©tat de "
"[draft](https://www.ietf.org/archive/id/draft-ietf-tls-esni-10.html)... üòï"
msgstr ""

#: fr/tls.md:45
msgid ""
"Une autre fonctionnalit√© importante dans TLS 1.3 est le 0 RTT, c'est une "
"fonctionnalit√© tr√®s controvers√©e car elle ne respecte pas le principe de "
"`forward-secrecy`, si un attaquant arrive √† trouver la cl√© utilis√©e pour le "
"chiffrement sym√©trique, il pourra d√©chiffrer toutes les prochaines "
"requ√™tes. Elle consiste, pour faire simple, √† garder une m√™me cl√© "
"sym√©trique pour plusieurs √©changes afin de reprendre un √©change sans avoir "
"√† faire de handshake, mais cette fonctionnalit√© est une fausse bonne id√©e..."
msgstr ""