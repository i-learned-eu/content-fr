#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"POT-Creation-Date: 2022-06-16 15:23+0000\n"
"Plural-Forms: \n"

#: fr/http.md:0
msgid ""
"lang: fr\n"
"title: Le fonctionnement d'HTTP\n"
"summary: De nos jours le web est très utilisé, un protocol est derrière ce "
"succès : HTTP\n"
"slug: http\n"
"Keywords: HTTPS, HTTP, web, internet\n"
"Date: 2021-05-08\n"
"author: Ramle\n"
"Category: Réseau/HTTP & TLS"
msgstr ""

#: fr/http.md:2
msgid ""
"Le web est l'usage le plus connu d'internet, un protocole assez vieux (mais "
"pas aussi vieux qu'internet) se cache derrière ce succès : HTTP."
msgstr ""

#: fr/http.md:4
msgid ""
"HTTP est l'acronyme d'Hyper Text Transfer Protocol (protocole de transfert "
"hypertexte si l'on traduit en français), il a été inventé pour palier à "
"certains manques de FTP qui à l'époque était majoritaire, un des points "
"principaux est la notion de format de données, c'est à dire indiquer au "
"client quel est le type de donnée, cela permet au client de pouvoir "
"interpréter et afficher sans demander à l'utilisateur ce qu'il doit faire "
"de chaque fichier. Cette notion de \"format de données\" s'appelle le MIME."
msgstr ""

#: fr/http.md:6
msgid "![Schéma sur le MIME](/static/img/http/mime.webp)"
msgstr ""

#: fr/http.md:8
msgid ""
"HTTP a connu plusieurs versions, l'initiale étant la 0.9 (notée HTTP/0.9) "
"qui n'a jamais été standardisée dans une RFC, une RFC (pour request for "
"comment, soit demande de commentaires en français) est un document "
"technique identifié par un numéro définissant des procédures ou protocoles, "
"ces documents sont accessibles sur "
"[https://www.rfc-editor.org/rfc/](https://www.rfc-editor.org/rfc/) (ou "
"gemini://gemini.bortzmeyer.org/rfc-mirror/rfc-index.gmi via "
"[Gemini](https://ilearned.eu/gemini.html)), l'usage de cette version d'HTTP "
"est assez marginal de nos jours. Quelques années plus tard est sorti au "
"travers d'une RFC (la [1945](https://www.rfc-editor.org/rfc/rfc1945.html)) "
"HTTP/1.0 cette RFC s'occupe surtout de préciser comment HTTP fonctionne, il "
"n'apporte pas d'évolution avec la version 0.9. Assez rapidement HTTP/1.1 "
"sort, cette version apporte certaines optimisations, comme l'envoi de "
"plusieurs requêtes en simultané."
msgstr ""

#: fr/http.md:10
msgid ""
"Le fonctionnement d'HTTP se base sur le [protocole "
"TCP](https://ilearned.eu/tcp.html), par défaut le port utilisé est le 80. "
"Pour demander ou envoyer des contenus on utilise des \"méthodes\", une "
"méthode est une commande envoyée au serveur. On peut en citer plusieurs :"
msgstr ""

#: fr/http.md:14
msgid "GET : Demande une ressource"
msgstr ""

#: fr/http.md:17
msgid "HEAD : Demande uniquement les informations"
msgstr ""

#: fr/http.md:20
msgid "POST : Envoie des données"
msgstr ""

#: fr/http.md:24
msgid ""
"La liste n'est pas complète, je vous laisse rechercher par vous même pour "
"plus d'informations à ce propos ;)."
msgstr ""

#: fr/http.md:26
msgid ""
"On peut regarder plus en profondeur HTTP en regardant les transmissions "
"réseaux :\n"
"![Schéma capture réseau HTTP](/static/img/http/capture_http.webp)\n"
"La partie data, celle qui contient la page en elle même n'est pas "
"directement visible ici, je vous laisse regarder le dump réseau sur "
"wireshark, il est disponible [ici](/static/misc/http.pcap)."
msgstr ""

#: fr/http.md:28
msgid ""
"Un autre aspect intéressant d'HTTP sont les en-têtes (headers) qui donnent "
"des informations au client à propos du serveur, et inversement. Côté client "
"par exemple, on a l'en-tête \"Host\" qui donne le nom de domaine demandé "
"par le client, cela permet de distribuer un contenu différent en fonction "
"de celui-ci. Le serveur peut lui donner le type de contenu via "
"\"Content-Type\". Il y a beaucoup d'autres en-têtes possibles, si vous "
"voulez regarder celle d'une URL la commande `curl` le permet via l'option "
"`-I`, pour [https://ramle.be](https://ramle.be) par exemple :"
msgstr ""

#: fr/http.md:30
msgid ""
"% curl -I https://ramle.be\n"
"HTTP/2 200\n"
"server: nginx\n"
"date: Sat, 08 May 2021 14:40:55 GMT\n"
"content-type: text/html; charset=utf-8\n"
"content-length: 1992\n"
"last-modified: Fri, 23 Apr 2021 18:18:34 GMT\n"
"vary: Accept-Encoding\n"
"etag: \"60830f7a-7c8\"\n"
"content-security-policy: default-src 'none'; style-src cdn.ramle.be; "
"img-src cdn.ramle.be\n"
"x-frame-options: SAMEORIGIN\n"
"x-xss-protection: 1; mode=block\n"
"x-content-type-options: nosniff\n"
"referrer-policy: same-origin\n"
"x-permitted-cross-domain-policies: master-only\n"
"expect-ct: max-age=60, enforce\n"
"permissions-policy: accelerometer=(), camera=(), geolocation=(), "
"gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=()\n"
"strict-transport-security: max-age=31536000; includeSubDomains; preload\n"
"accept-ranges: bytes"
msgstr ""

#: fr/http.md:31
msgid ""
"On remarque sur la première ligne la version d'HTTP, ici c'est la version "
"2. On voit ensuite la liste des en-têtes :"
msgstr ""

#: fr/http.md:35
msgid ""
"**content-type** indique le type de contenu (le "
"[MIME](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/"
"MIME_types))"
msgstr ""

#: fr/http.md:38
msgid ""
"**etag** indique une suite de caractères ASCII, cette chaîne change si le "
"contenu distant change, cela permet de mettre en cache les ressources. Il "
"n'y a pas de méthode définie pour la génération de cette chaîne de "
"caractères."
msgstr ""

#: fr/http.md:42
msgid ""
"Je n'ai décrit ici que les en-têtes qui me semblait importants pour cet "
"article, beaucoup d'autres en-têtes restent très utiles mais moins "
"utilisés, souvent orientés sécurité, certains feront surement l'objet d'un "
"article prochainement ;). Si vous voulez des informations plus précises sur "
"celle-ci je vous laisse aller voir la documentation de MDN qui est assez "
"complète."
msgstr ""

#: fr/http.md:44
msgid ""
"J'ai cité plus haut la version 2 d'HTTP (notée HTTP/2) sans expliquer les "
"changements apportés par cette version, nous allons donc dans ce paragraphe "
"voir les différences avec HTTP/1.1, pour commencer l'implémentation faite "
"par beaucoup de navigateurs impose le chiffrement via HTTPS (on reparlera "
"plus bas d'HTTPS), un autre changement est dans le transport lui même, "
"HTTP/1.1 se base sur du texte, là ou HTTP/2 utilise du binaire, ça le rends "
"plus compact et facile à parser, mais non lisible par un humain sans outil "
"spécifique. Il y a aussi un changement dans la connexion TCP elle même, au "
"lieu de faire une connexion [TCP](https://ilearned.eu/tcp.html) par "
"ressource, on utilise une seule connexion pour toutes les ressources le "
"gain latence est assez important au vu du nombre d'aller-retour "
"[TCP](https://ilearned.eu/tcp.html).\n"
"://\n"
"![Schéma HTTP/2 vs HTTP/1.1](/static/img/http/http2.webp):"
msgstr ""

#: fr/http.md:46
msgid ""
"Vous avez probablement remarqué qu'HTTP ne présente presque aucun mécanisme "
"de sécurité de base, il n'est en effet pas possible de vérifier "
"l'authenticité des ressources ni d'empêcher un attaquant d'espionner la "
"connexion, pour résoudre ce problème HTTPS est né, il s'agit simplement de "
"faire passer HTTP via TLS, pour ce qui est de la vérification on se base "
"sur les autorités de certification, contrairement à d'autres protocoles "
"comme [Gemini](https://ilearned.eu/gemini.html), je vous invite à aller "
"voir l'article sur [DANE](https://ilearned.eu/dane.html) pour plus de "
"détails à propos des autorités de certification."
msgstr ""

#: fr/http.md:48
msgid ""
"HTTP permet de réduire la taille des données envoyées en les compressant, "
"les deux algorithmes utilisés pour compresser les données sont gzip et "
"brotli, le client peut dire au serveur lequel de ces algorithmes il "
"supporte via l'en-tête \"**Accept-encoding**\"."
msgstr ""

#: fr/http.md:50
msgid ""
"C'est tout pour l'article d'aujourd'hui, j'espère qu'il vous aura plus :), "
"On se retrouve demain pour parler de **radvd**."
msgstr ""