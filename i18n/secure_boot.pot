#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"POT-Creation-Date: 2022-07-09 19:00+0000\n"
"Plural-Forms: \n"

#: fr/secure_boot.md:0
msgid ""
"lang: fr\n"
"Author: Elmar\n"
"Date: 2021/07/07\n"
"Keywords: s√©curit√©\n"
"Slug: secure_boot\n"
"Summary: La v√©rification de l‚Äôint√©grit√© d'un syst√®me lors de son d√©marrage "
"est crucial, si un attaquant est capable de modifier des fichiers il peut "
"facilement avoir les pleins pouvoirs pour y impl√©menter un malware. Pour "
"rem√©dier √† cela, Secure Boot a √©t√© cr√©√©.\n"
"Title: V√©rifier l‚Äôint√©grit√© d'un syst√®me d'exploitation gr√¢ce √† Secure "
"Boot.\n"
"Category: Cybers√©curit√©/Blue Team"
msgstr ""

#: fr/secure_boot.md:2
msgid ""
"La s√©curit√© d‚Äôun syst√®me d√©pend de beaucoup de facteurs, un des facteurs "
"importants est de pouvoir v√©rifier l‚Äôint√©grit√© du syst√®me d√©marr√©, en effet "
"sans cette v√©rification un attaquant pourrait sans trop de difficult√©s "
"modifier les fichiers de d√©marrage pour ajouter un malware. Cet article se "
"concentrera sur les machines de bureau."
msgstr ""

#: fr/secure_boot.md:4
msgid ""
"Pour bien comprendre comment des attaques peuvent √™tre effectu√©es pendant "
"le boot, il est important de comprendre le fonctionnement du d√©marrage en "
"mode BIOS, et son rempla√ßant l'UEFI."
msgstr ""

#: fr/secure_boot.md:6
msgid "BIOS"
msgstr ""

#: fr/secure_boot.md:7
msgid ""
"Le d√©marrage en BIOS s'appuie sur une table des partitions en MBR (Master "
"Boot Record). Pour d√©marrer le BIOS va ex√©cuter du code contenu dans la "
"table des partitions, ce code s'occupe de passer la main au bootloader qui "
"va s'occuper de lancer le syst√®me. Un probl√®me assez flagrant apparait "
"d√©j√†, du code peut √™tre directement ins√©r√© dans cette partie, aucune "
"v√©rification n'est effectu√©e par le BIOS. Un attaquant pourrait aussi "
"attaquer le bootloader qui ne peut pas √™tre chiffr√©."
msgstr ""

#: fr/secure_boot.md:9
msgid ""
"Sous Linux (nous verrons le fonctionnement de Windows un peu plus loin), le "
"bootloader le plus courant est GRUB. Il ins√®re dans le MBR de quoi charger "
"son code complet qui est contenu dans `/boot`, la plupart des bootloaders "
"sous Linux fonctionnent sur le m√™me principe."
msgstr ""

#: fr/secure_boot.md:11
msgid "![Un syst√®me non chiffr√©](/static/img/secure_boot/Boot_mbr.webp)"
msgstr ""

#: fr/secure_boot.md:13
msgid ""
"Pour √©viter une modification du syst√®me on pourrait chiffrer la partition "
"root (aussi appel√© Userland) et faire un `/boot` √† part (le bootloader ne "
"peut pas √™tre chiffr√©). Un probl√®me se pose alors, l'initramfs et le kernel "
"sont toujours en clair."
msgstr ""

#: fr/secure_boot.md:15
msgid ""
"![Un syst√®me chiffr√© avec seulement le userland de "
"chiffr√©](/static/img/secure_boot/Boot_mbr(1).webp)"
msgstr ""

#: fr/secure_boot.md:17
msgid ""
"GRUB (et c'est √† ma connaissance le seul) permet de d√©chiffrer le partition "
"boot, pour garder l'initramfs et le kernel chiffr√©. Mais GRUB en lui m√™me "
"est toujours modifiable, m√™me chose pour le code ex√©cut√© directement dans "
"le MBR."
msgstr ""

#: fr/secure_boot.md:19
msgid ""
"![Un syst√®me chiffr√© avec le userland et le kernel de "
"chiffr√©](/static/img/secure_boot/Boot_mbr(2).webp)"
msgstr ""

#: fr/secure_boot.md:21
msgid ""
"En plus de ne pas √™tre totalement s√©curis√©, avec cette m√©thode la phrase de "
"passe doit √™tre tap√©e deux fois : une fois pour lire l'initramfs et une "
"autre fois pour d√©chiffrer la partition root. (GRUB ne la retient pas.)"
msgstr ""

#: fr/secure_boot.md:23
msgid ""
"Une solution possible serait de signer les diff√©rents √©l√©ments du boot, le "
"probl√®me est qu'en BIOS aucun m√©canisme pour la v√©rification de signature "
"existe."
msgstr ""

#: fr/secure_boot.md:25
msgid ""
"Avec un BIOS nous n'avons pas de possibilit√© de s√©curiser enti√®rement un "
"syst√®me Linux."
msgstr ""

#: fr/secure_boot.md:27
msgid ""
"Pour Windows, le concept est tr√®s proche. Le BIOS va ex√©cuter le code dans "
"le MBR, ce code va enclencher le bootloader de Windows (qui, depuis Windows "
"Vista, est bootmgr). Chiffrer son disque pose le m√™me soucis que sous Linux "
": le bootloader restera en clair."
msgstr ""

#: fr/secure_boot.md:29
msgid "UEFI"
msgstr ""

#: fr/secure_boot.md:30
msgid ""
"Avec UEFI on se passe de MBR au profit de GPT qui apporte un certain nombre "
"d'avantages. Le processus de boot ne se passe plus par un code ex√©cutable "
"dans la partie MBR, ce code est contenu dans une partition en FAT32 (ou "
"FAT16), ce qui permet de ne plus √™tre aussi limit√© en taille (la partie "
"d√©di√© au code de d√©marrage dans MBR n'est que de 446 octets). UEFI apporte "
"aussi une √©volution majeure pour la s√©curit√© : Secure Boot, c'est un moyen "
"de v√©rifier l'int√©grit√© via une signature du fichier EFI. Un fichier EFI "
"est un ex√©cutable lanc√© par l'UEFI qu'on pourrait le comparer aux ELF de "
"Linux ou aux exe de Windows."
msgstr ""

#: fr/secure_boot.md:32
msgid ""
"Lorsque qu'un PC avec Secure Boot d√©marre, il v√©rifie le binaire EFI pour "
"voir si la signature correspond √† une cl√© de \"confiance\" et si la "
"signature n'est pas dans dans la liste des cl√©s √† refuser."
msgstr ""

#: fr/secure_boot.md:34
msgid ""
"L'UEFI se base sur des variables pour les cl√©s, vous pouvez les voir depuis "
"Linux via l'utilitaire \"efi-readvars\". Ce qui sur ma machine donne :"
msgstr ""

#: fr/secure_boot.md:36
msgid ""
"Variable PK, length 823\n"
"PK: List 0, type X509\n"
"    Signature 0, size 795, owner 5b2a4205-8ee1-404d-a357-45629f968019\n"
"        Subject:\n"
"            CN=Ramle PK\n"
"        Issuer:\n"
"            CN=Ramle PK\n"
"Variable KEK, length 825\n"
"KEK: List 0, type X509\n"
"    Signature 0, size 797, owner 5b2a4205-8ee1-404d-a357-45629f968019\n"
"        Subject:\n"
"            CN=Ramle KEK\n"
"        Issuer:\n"
"            CN=Ramle KEK\n"
"Variable db, length 823\n"
"db: List 0, type X509\n"
"    Signature 0, size 795, owner 5b2a4205-8ee1-404d-a357-45629f968019\n"
"        Subject:\n"
"            CN=Ramle DB\n"
"        Issuer:\n"
"            CN=Ramle DB\n"
"Variable dbx has no entries\n"
"Variable MokList has no entries"
msgstr ""

#: fr/secure_boot.md:37
msgid "Regardons de plus pr√®s chaque variable :"
msgstr ""

#: fr/secure_boot.md:41
msgid ""
"PK : C'est la cl√© la plus haute dans la chaine de confiance, elle est l√† "
"pour signer la cl√© KEK, une seule cl√© est possible dans cette variable. En "
"g√©n√©ral c'est le constructeur qui met sa cl√©, si vous voulez contr√¥ler "
"totalement la chaine de confiance il faudra donc la changer."
msgstr ""

#: fr/secure_boot.md:44
msgid ""
"KEK : Ces cl√© sont utilis√©es pour signer les cl√©s qui iront dans DB ou DBX, "
"souvent de base il y a 2 KEK, une pour Microsoft et une autre pour le "
"fabricant."
msgstr ""

#: fr/secure_boot.md:47
msgid ""
"DB : Ce sont les cl√©s utilis√©es pour la v√©rifications des binaires EFI. "
"Souvent l'ordinateur vient avec les cl√©s du constructeur, de Microsoft, "
"Canonical (entreprise qui est derri√®re Ubuntu) et parfois d'autres "
"entreprises."
msgstr ""

#: fr/secure_boot.md:50
msgid "DBX : C'est la liste des cl√©s qui ne sont plus de confiance."
msgstr ""

#: fr/secure_boot.md:53
msgid ""
"MOKList : C'est utilis√© par un outil du nom de Shim, cet outil est l√† pour "
"charger un autre bootloader qui ne serait pas sign√© avec les cl√©s pr√©sentes "
"dans DB. Shim va v√©rifier le bootloader via les cl√©s dans la MOKList qui "
"est g√©r√© par l'utilisateur, et non via l'UEFI directement."
msgstr ""

#: fr/secure_boot.md:57
msgid ""
"![La chaine de confiance de Secure "
"Boot](/static/img/secure_boot/Cl_secure_boot(1).webp)"
msgstr ""

#: fr/secure_boot.md:59
msgid ""
"Ces variables sont bien s√ªr modifiables sur la plupart des PC, ce qui "
"permet de g√©rer sa propre PKI (public key infrastructure)."
msgstr ""

#: fr/secure_boot.md:61
msgid ""
"Si on veut un r√©el contr√¥le il faut g√©rer soit m√™me ses cl√©s. Sous Linux "
"c'est possible sans trop de difficult√©s, FreeBSD et OpenBSD semblent "
"supporter aussi (je n'ai pas eu l'occasion de tester) et sous Windows on "
"peut soit utiliser les cl√©s de Microsoft ou utiliser ses propres cl√©s ce "
"qui semble en th√©orie possible."
msgstr ""

#: fr/secure_boot.md:63
msgid ""
"J'esp√®re que cette article vous aura plus, je pense prochainement faire un "
"petit guide pour la gestion de Secure Boot sous Linux, je vous laisse donc "
"surveiller les sorties üëÄ. On se retrouve apr√®s demain pour un article sur "
"MQTT."
msgstr ""